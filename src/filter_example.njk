---
layout: layouts/main.njk
---
{# This example demonstrates a method of filtering displayed content based on a list of tags using eleventy and alpine.js #}
{# I inherit from a "main" template which contains the HTML head and loads alpine.js, but this could be done in the current file #}

<style>
  .filter-button {
    padding:1rem;
    margin:0.5rem 0.5rem 0.5rem 0.5rem;
    background-color: gray;
    border: 1rem solid darkgray
  }

  .filter-button-on {
    padding:1rem;
    margin:0.5rem 0.5rem 0.5rem 0.5rem;
    background-color: greenyellow;
    border: 1rem solid green
  }

  .box {
    padding:1rem;
    margin:0.5rem 0.5rem 0.5rem 0.5rem;
    background-color:lightgray
  }
</style>


{# Data 1: In _data/people.json, we have a list of JSON objects representing people. These objects each have a name property, and an expertiseTags property (a string where tags are comma-separated) #}
{# Data 2: In _data/expertiseTags.json, we have a JSON object containing only one property ("tags"), which is a js list of strings each representing one of the possible tags that a person can be assigned #}

{# In this example, we filter a list of people's names based on the the expertise tags in their JSON object. #}
{# The filtering actually just hides people if their tags are not selected. #}

{# Define some x-data which stores a list of currently selected expertise tags, and some functions for updating the selection #}
{# The line '{{expertiseTags.tags | listToQuotedListString}}' takes the list of possible tags from expertiseTags.json and applies the function listToQuotedListString to that list #}
{# listToQuotedListString is defined as a filter in ".eleventy.js" in the root directory:  eleventyConfig.addFilter("listToQuotedListString", (lst) => {return ('[' + lst.map(i => `'${i}'`).join(',') + ']')}) #}
<div x-data="{selectedExpertise: {{expertiseTags.tags | listToQuotedListString}}, deselect(ex) {this.selectedExpertise = this.selectedExpertise.filter(item => item !== ex)}, select(ex) {if(this.selectedExpertise.indexOf(ex)) { this.selectedExpertise.push(ex)}}, isSelected(exList) {return (exList.split(',')).every(v => this.selectedExpertise.includes(v))}}">
      <div style="display:flex; flex-wrap:wrap">

        {# For each expertise tag, greate a button to toggle whether that tag is selected or not #}
        {% for expertiseTag in expertiseTags.tags %}
          <button class="filter-button" x-data="{ active: true }" @click="active ? deselect('{{expertiseTag}}') : select('{{expertiseTag}}'); active = !active" :class="{ 'filter-button-on': active,  'filter-button': !active }">{{expertiseTag}}</button>
        {% endfor %}
      </div>

      <div style="display:flex; flex-wrap:wrap">   
        {# For each person, create a DOM object (a div in this case, but it can be whatever you like) containing some of that person's data #}
        {# Note: we create an object for all people, even those who are not currently selected by the filtering. #}     
        {% for person in people %}

            {# Add some x-data to the person object which contains this individual's expertise tags #}
            {# We then hide this person (using x-show) if their tags are not currently selected #}
            <div class="box" x-data="{personExpertise: '{{person.expertiseTags}}'}" x-show="isSelected(personExpertise)">
              <span>{{ person.name }}</span>    
            </div>
        {% endfor %}
      </div>  
</div>
